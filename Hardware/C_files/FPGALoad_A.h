#include "int_to_float.h" //Already included in the main file in xilinx sdk **new** 2018.+ version
#include "float_to_int.h" //Already included in the main file in xilinx sdk **new** 2018.+ version

//Large arrays in FPGA should be declared global to prevent later issues
int A_size = 665;
float A[665] = {0.133348003, -0.06666699797, -1.400000019e-05, -0.06666699797, 0.133348003, -0.06666699797, -1.400000019e-05, -0.06666699797, 0.1333419979, -0.06666699797, -0.06666699797, -7.99999998e-06, 15.00051403, -0.0004780000017, -9.999999975e-07, -1.800000064e-05, -1.800000064e-05, -0.0004790000094, 0.0025510001, -8.800000069e-05, -0.000996000017, -0.0009889999637, -0.06666699797, -0.06666699797, 1.999999995e-06, 0.0001329999941, 0.3336409926, -0.0002300000051, -0.200000003, -0.0002130000066, -1.400000019e-05, -1.599999996e-05, -0.001343999989, 0.0003309999884, 0.01280899998, -0.01197000034, 0.0002039999963, 0.1333619952, -0.06666699797, -2.900000072e-05, -0.06666699797, 0.1333460063, -0.06666699797, -0.06666699797, -1.299999985e-05, 7.500656128, -0.0005869999877, -9.999999975e-07, -3.600000127e-05, -3.300000026e-05, -0.0005900000106, 0.003945000004, -0.0006610000273, -0.001637000008, -0.001057000016, -0.06666699797, -0.06666699797, 3.99999999e-06, 0.0001909999992, 0.3337770104, -0.0004009999975, -0.200000003, -0.0002379999933, -2.900000072e-05, -3.799999831e-05, -0.003547, 0.0002200000017, 0.0260429997, -0.02394000068, 0.001290000044, 0.133348003, -1.400000019e-05, -0.06666699797, 0.1333419979, -0.06666699797, -9.000000318e-06, 0.02975600027, -6.099999882e-05, -9.999999975e-07, -0.02963400073, -6.099999882e-05, -1.400000019e-05, -7.899999764e-05, 0.01424599998, 4.999999874e-05, -1.70000003e-05, -0.00221600011, -0.06666699797, -0.06666699797, 6.000000212e-06, -1.400000019e-05, 0.3333519995, 9.999999975e-07, -1.200000042e-05, -0.02963400073, -1.800000064e-05, 0.8630030155, -1.800000064e-05, -0.8333330154, 0.03590999916, -0.02394000068, -0.01197000034, 0.1333619952, -0.06666699797, -0.06666699797, -2.900000072e-05, 1, -0.06666699797, 0.1333460063, -0.06666699797, -1.299999985e-05, -0.06666699797, -0.200000003, -0.06666699797, 0.3333669901, -4.999999874e-06, -3.300000026e-05, 4.999999874e-06, -2.900000072e-05, -0.02394000068, 9.999999975e-07, 0.02402699925, -9.999999975e-07, -3.40000006e-05, -2.400000085e-05, -3.199999992e-05, -1.899999916e-05, 0.004277000204, -0.004242999945, 1.70000003e-05, -3.40000006e-05, -0.004242999945, 0.4209710062, -2.700000005e-05, -0.4166670144, -0.02394000068, -1.299999985e-05, -1.999999995e-06, -2.700000005e-05, 0.02398199961, -9.000000318e-06, -4.999999874e-05, -0.002168999985, -6.800000119e-05, -1.999999949e-05, -0.01197000034, 0.01428500004, 1, 0.133348003, -1.400000019e-05, -0.06666699797, -1.400000019e-05, 0.01200100034, -1.599999996e-05, 0.1333400011, -0.06666699797, -6.000000212e-06, 0.00655400008, -9.000000318e-06, -9.999999747e-06, -0.006535000168, -0.06666699797, -0.06666699797, -1.899999916e-05, 0.3333519995, -6.000000212e-06, -9.999999747e-06, 0.0120000001, -1.400000019e-05, -0.01197000034, -0.8333330154, -1.599999996e-05, -0.006535000168, -1.400000019e-05, 0.8398979902, 2.083333015, -0.8333330154, 1, -0.4166670144, -0.8333330154, -0.06666699797, 0.1333619952, -0.06666699797, -2.900000072e-05, -0.06666699797, 0.1333509982, -0.06666699797, -1.800000064e-05, -0.200000003, -0.06666699797, -0.06666699797, 0.3333700001, -2.599999971e-05, 1.499999962e-05, -2.599999971e-05, -0.02394000068, -2.900000072e-05, 0.0001080000002, 0.02537200041, -0.0001380000031, -0.001337999944, -3.500000093e-05, -6.000000212e-06, -0.0001110000012, 0.0175199993, -0.0001110000012, -0.01729200035, -1.800000064e-05, -0.0001380000031, -0.001230999944, -0.0001049999992, 0.02546799928, -3.600000127e-05, -0.02394000068, -0.4166670144, -3.600000127e-05, -0.01729200035, -3.600000127e-05, 0.4340299964, 0.02394000068, -0.01197000034, -0.01197000034, 0.133348003, -1.400000019e-05, -0.06666699797, -0.01197000034, -1.400000019e-05, 0.01200100034, -1.599999996e-05, 0.1333400011, -7.000000096e-06, -0.06666699797, 0.006544000003, -1.999999995e-06, -1.599999996e-05, -0.006525000092, -7.000000096e-06, 0.01199200004, -1.999999995e-06, -1.400000019e-05, -0.01197000034, -0.06666699797, -0.06666699797, -1.899999916e-05, 0.3333519995, -0.8333330154, -1.599999996e-05, -0.006525000092, -1.400000019e-05, 0.8398889899, 0.133348003, -1.400000019e-05, -0.06666699797, 0.1333419979, -0.06666699797, -9.000000318e-06, 0.02931799926, -7.200000255e-05, -1.999999995e-06, -0.0291709993, -7.300000289e-05, -1.400000019e-05, -0.0001049999992, 0.01425199956, 5.199999941e-05, -1.499999962e-05, -0.00219899998, -0.06666699797, -0.06666699797, 6.000000212e-06, -1.499999962e-05, 0.3333519995, 3.000000106e-06, -1.200000042e-05, 0.133348003, -1.400000019e-05, -0.06666699797, -1.400000019e-05, 0.01200100034, -1.599999996e-05, 0.1333400011, -0.06666699797, -6.000000212e-06, 0.006552999839, -9.999999747e-06, -9.000000318e-06, -0.006535000168, -0.06666699797, -0.06666699797, -1.899999916e-05, 0.3333519995, -6.000000212e-06, -9.000000318e-06, 0.01199899986, -1.400000019e-05, -0.01197000034, -1.599999996e-05, -0.006535000168, -1.400000019e-05, 0.8398979902, -0.8333330154, 1, 0.133348003, -1.400000019e-05, -0.06666699797, -1.400000019e-05, 0.01200100034, -1.599999996e-05, 0.006550999824, -1.899999916e-05, -0.006531999912, 0.1333400011, -0.06666699797, -7.000000096e-06, -0.06666699797, -1.899999916e-05, -0.06666699797, 0.3333519995, -7.000000096e-06, 0.01198999956, -0.01197000034, -1.400000019e-05, -0.01197000034, 0.02394000068, -0.01197000034, -0.8333330154, -1.599999996e-05, -0.006531999912, -1.400000019e-05, 0.83989501, -0.8333330154, 2.083333015, -0.8333330154, 1, -0.4166670144, -0.06666699797, 0.1333619952, -0.06666699797, -2.900000072e-05, -0.06666699797, 0.1333509982, -0.06666699797, -1.800000064e-05, -0.200000003, -0.06666699797, -0.06666699797, 0.3333700001, -2.900000072e-05, 1.499999962e-05, -2.300000051e-05, -0.02394000068, -2.900000072e-05, 0.0001069999998, 0.02536699921, -0.0001380000031, -0.001332000014, -3.500000093e-05, -6.000000212e-06, -0.0001100000009, 0.01746900007, -0.0001110000012, -0.01724099927, -1.800000064e-05, -0.0001380000031, -0.001222999999, -0.0001039999988, 0.02545900084, -3.600000127e-05, -0.02394000068, -0.4166670144, -3.600000127e-05, -0.01724099927, -3.600000127e-05, 0.4339790046, -0.01197000034, -0.02394000068, 0.8692430258, -0.8333330154, 0.1333439946, -0.06666699797, -1.100000009e-05, 0.1333400011, -0.06666699797, -7.000000096e-06, -0.06666699797, -0.06666699797, 0.3333440125, -9.999999747e-06, -9.999999747e-06, 0.003721999936, -0.003712000092, 9.999999975e-07, -9.999999975e-07, -0.003712000092, 0.8370800018, -1.70000003e-05, -1.70000003e-05, -0.8333330154, -7.000000096e-06, -1.70000003e-05, 0.01199399959, -0.01197000034, -0.01197000034, -1.100000009e-05, -1.70000003e-05, -9.999999975e-07, 0.01199899986, -0.0291709993, -1.800000064e-05, -0.8333330154, 0.8625389934, -1.800000064e-05, -0.01197000034, -9.000000318e-06, -4.80000017e-05, -0.002162999939, -6.900000153e-05, -2.200000017e-05, 0.01428100001, -0.01197000034, -0.02394000068, -0.8333330154, 0.8692430258, -0.01197000034, 0.8572729826, -0.8333330154, -0.01197000034, 0.133348003, -1.400000019e-05, -0.06666699797, 0.1333419979, -0.06666699797, -9.000000318e-06, 0.02932499908, -6.199999916e-05, -9.999999975e-07, -0.02920399979, -5.800000145e-05, -1.400000019e-05, -7.699999696e-05, 0.0141970003, 4.89999984e-05, -1.70000003e-05, -0.002167999977, -0.06666699797, -0.06666699797, 6.000000212e-06, -3.300000026e-05, 0.3333509862, 9.999999975e-07, 7.000000096e-06, -0.02920399979, -1.800000064e-05, 0.8625730276, -1.800000064e-05, -0.8333330154, 0.03590999916, -0.01197000034, -0.02394000068, 0.133348003, -0.06666699797, -1.400000019e-05, 0.1333400011, -0.06666699797, -6.000000212e-06, -0.06666699797, -0.06666699797, 0.3333509862, -1.800000064e-05, -1.400000019e-05, 0.01200299989, -1.70000003e-05, -1.999999995e-06, -1.299999985e-05, -9.999999975e-07, 0.006581000052, -0.006562999915, -3.99999999e-06, -1.70000003e-05, -0.006562999915, 0.8399260044, -1.400000019e-05, -0.8333330154, -0.01197000034, -6.000000212e-06, -4.999999874e-06, -1.400000019e-05, 0.01199499983, -0.06666699797, 0.1333619952, -0.06666699797, -2.900000072e-05, -0.06666699797, 0.1333509982, -0.06666699797, -1.800000064e-05, -0.200000003, -0.06666699797, -0.06666699797, 0.3333700001, -2.599999971e-05, 1.499999962e-05, -2.599999971e-05, -0.02394000068, -2.900000072e-05, 0.0001049999992, 0.02537599951, -0.0001349999948, -0.001341999974, -3.600000127e-05, -3.99999999e-06, -0.0001110000012, 0.01763400063, -0.0001110000012, -0.01740900055, -0.02394000068, -1.800000064e-05, -0.0001380000031, -0.001234999974, -0.0001049999992, 0.025471, -3.600000127e-05, -3.600000127e-05, -0.01740900055, -3.600000127e-05, 0.4341470003, -0.4166670144, -0.8333330154, -0.4166670144, 1.286209941, -0.01197000034, -0.02394000068, 0.02394000068, -0.01197000034, -0.01197000034, 0.133348003, -0.06666699797, -1.400000019e-05, 0.1333419979, -0.06666699797, -9.000000318e-06, 0.028957, -9.999999975e-07, -6.29999995e-05, -6.099999882e-05, -0.02883199975, -0.06666699797, -0.06666699797, 6.000000212e-06, 0.3333509862, -3.099999958e-05, 4.999999874e-06, 9.999999975e-07, -0.01197000034, -1.400000019e-05, -8.099999832e-05, 4.89999984e-05, 0.01417800039, -0.002146000043, -1.70000003e-05, -0.01197000034, -9.000000318e-06, -5.099999908e-05, -6.600000052e-05, -0.002082000021, 0.01419799961, -1.999999949e-05, -9.000000318e-06, -4.999999874e-05, -0.002099999925, -6.600000052e-05, -1.999999949e-05, -0.01197000034, 0.01421600021, -0.8333330154, -0.02883199975, -1.800000064e-05, -1.800000064e-05, 0.8622009754, -0.8333330154, -0.4166670144, -0.01197000034, -0.8333330154, 2.107372999, -0.01197000034, -1.299999985e-05, -3.300000026e-05, -3.000000106e-06, -9.999999975e-07, -9.999999975e-07, -0.02394000068, 0.02398999967, -7.99999998e-06, -2.200000017e-05, -0.0008619999862, -0.000549999997, 0.0004189999891, -0.01197000034, 0.01299399976, -0.06666699797, 0.1333419979, -9.000000318e-06, -0.06666699797, -0.06666699797, -0.06666699797, -0.06666699797, -0.200000003, -0.01197000034, -0.06666699797, -0.06666699797, -0.200000003, -0.02394000068, -0.06666699797, 2.476972103, -0.06666699797, -0.200000003, -0.02394000068, -0.06666699797, -0.06666699797, -0.200000003, -0.02394000068, -0.06666699797, -0.06666699797, -0.200000003, -0.02394000068, -0.06666699797, -0.06666699797, -0.200000003, -0.02394000068, -0.06666699797, 1, -0.01197000034, -0.200000003, 15.0005312, -0.0004939999781, -1.800000064e-05, -1.800000064e-05, -9.999999975e-07, -0.0004949999857, 0.002577000065, -0.001001000055, -0.0009970000247, -8.299999899e-05, -1.400000019e-05, -0.01197000034, -1.599999996e-05, -0.001313999994, 0.01279000007, 0.0001829999965, 0.0003410000063, -0.01197000034, -9.000000318e-06, -2.200000017e-05, -0.0009030000074, 0.0004469999985, 0.01303400006, -0.000577000028, -0.06666699797, -0.200000003, -0.06666699797, 1.999999995e-06, 0.0001349999948, -0.0002340000065, -0.0002229999955, 0.333653003};


int A_BRAMInd_size = 665;
int A_BRAMInd[665] = {0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 1, 2, 1, 2, 3, 0, 1, 2, 0, 2, 3, 0, 1, 2, 3, 1, 2, 3, 0, 1, 2, 3, 0, 1, 3, 0, 1, 0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 0, 1, 2, 3, 0, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1, 3, 3, 0, 1, 2, 0, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 1, 2, 3, 0, 1, 2, 3, 0, 1, 3, 0, 1, 0, 1, 2, 3, 0, 1, 2, 0, 1, 2, 0, 1, 2, 3, 0, 1, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1, 2, 1, 3, 0, 1, 2, 3, 1, 2, 3, 0, 2, 0, 2, 3, 0, 1, 2, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 1, 0, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 1, 2, 1, 2, 0, 3, 0, 1, 0, 1, 3, 0, 1, 2, 2, 3, 0, 1, 2, 3, 1, 3, 1, 0, 2, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 2, 0, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 3, 0, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 0, 1, 2, 3, 0, 1, 3, 0, 1, 2, 3, 0, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 3, 0, 1, 2, 3, 0, 1, 3, 1, 2, 3, 0, 1, 2, 1, 1, 2, 0, 1, 3, 3, 0, 3, 2, 1, 3, 1, 2, 3, 0, 1, 3, 0, 3, 0, 1, 2, 3, 1, 3, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 2, 3, 0, 1, 2, 3, 0, 1, 0, 1, 2, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 2, 3, 0};


int A_BRAMAddr_size = 665;
int A_BRAMAddr[665] = {0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 23, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27, 27, 27, 28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31, 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 39, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 43, 43, 44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 47, 47, 47, 47, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 51, 51, 51, 51, 52, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 59, 59, 59, 59, 60, 60, 60, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63, 63, 64, 64, 64, 65, 65, 65, 66, 67, 67, 67, 68, 68, 69, 69, 69, 69, 70, 70, 70, 70, 71, 71, 71, 71, 72, 72, 72, 72, 73, 73, 73, 73, 74, 74, 74, 74, 75, 75, 75, 75, 76, 76, 76, 77, 77, 77, 77, 78, 78, 78, 79, 79, 80, 80, 80, 80, 81, 81, 81, 82, 82, 82, 83, 83, 83, 83, 84, 84, 84, 85, 85, 85, 85, 86, 86, 86, 87, 87, 87, 88, 88, 89, 89, 89, 89, 90, 90, 90, 91, 91, 92, 92, 92, 93, 93, 93, 94, 94, 94, 95, 95, 95, 95, 96, 96, 96, 96, 97, 97, 97, 97, 98, 98, 98, 98, 99, 99, 99, 99, 100, 100, 100, 100, 101, 101, 101, 101, 102, 102, 102, 102, 103, 103, 103, 103, 104, 105, 105, 105, 106, 106, 106, 106, 107, 107, 107, 107, 108, 108, 109, 109, 109, 109, 110, 110, 110, 110, 111, 111, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116, 116, 116, 117, 117, 117, 118, 118, 119, 119, 119, 119, 120, 120, 121, 122, 122, 123, 123, 124, 124, 124, 124, 125, 125, 125, 125, 126, 126, 126, 126, 127, 127, 127, 127, 128, 128, 128, 128, 129, 129, 129, 129, 130, 130, 130, 131, 131, 131, 131, 132, 132, 132, 132, 133, 133, 133, 133, 134, 134, 134, 135, 135, 136, 136, 136, 137, 137, 137, 137, 138, 138, 138, 138, 139, 139, 139, 139, 140, 140, 141, 141, 142, 142, 142, 142, 143, 143, 143, 143, 144, 144, 144, 144, 145, 145, 145, 145, 146, 146, 146, 146, 147, 147, 147, 147, 148, 148, 148, 149, 149, 149, 149, 150, 150, 150, 151, 151, 151, 151, 152, 152, 153, 153, 153, 153, 154, 154, 154, 154, 155, 155, 155, 155, 156, 156, 156, 156, 157, 157, 157, 157, 158, 158, 158, 158, 159, 159, 159, 159, 160, 160, 160, 161, 161, 161, 161, 162, 162, 162, 163, 163, 163, 164, 164, 164, 165, 166, 166, 167, 167, 167, 168, 169, 169, 170, 171, 171, 172, 172, 172, 173, 173, 173, 175, 175, 176, 176, 176, 176, 177, 177, 178, 178, 178, 179, 179, 179, 179, 180, 180, 180, 180, 181, 181, 181, 181, 182, 182, 182, 183, 184, 184, 184, 185, 185, 186, 186, 188, 188, 189, 189, 192, 192, 192, 193, 193, 193, 193, 194, 194, 194, 194, 195, 195, 195, 195, 196, 196, 196, 196, 197, 197, 197, 198, 199, 199, 199, 199, 200, 200, 200, 200, 201, 201, 201, 201, 202};


void delay_FPGALoad_A(){
int count = 100;
for(int i=0;i<count;){
i = i + 1;
}
}


//Function to initialize/clear data BRAMs
void clearDataBRAM(){
int i,j;
//Making enable and write_enable 0 for all the BRAMS
for(i=0;i<4;i++){
Xil_Out32(XPAR_MYIP_AXI_LUD_WRAPPER_0_BASEADDR + 4*(16+i), 0); //Making enable 0
delay_FPGALoad_A();
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(20+i), 0); //Making write enable 0
delay_FPGALoad_A();
}
for(i=0;i<4;i++){
for(j=0;j<4096;j++){
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(4+i), j); //Writing address,(4+i) is the offset
delay_FPGALoad_A();
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(8+i), 0); //Writing data in din
delay_FPGALoad_A();
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(16+i), 1); //Making enable 1
delay_FPGALoad_A();
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(20+i), 1); //Making write enable 1
delay_FPGALoad_A();
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(16+i), 0); //Making enable 0
delay_FPGALoad_A();
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(20+i), 0); //Making write enable 0
delay_FPGALoad_A();
}
}
}


//Function to verify if the data BRAMs is properly cleared
void verifyClearDataBRAM(){
int i,j;
int val,error_count;
error_count = 0;
//Making enable and write_enable 0 for all the BRAMS
for(i=0;i<4;i++){
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(16+i), 0); //Making enable 0
delay_FPGALoad_A();
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(20+i), 0); //Making write enable 0
delay_FPGALoad_A();
}
for(i=0;i<4;i++){
for(j=0;j<4096;j++){
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(4+i), j); //Writing address,(4+i) is the offset
delay_FPGALoad_A();
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(16+i), 1); //Making enable 1
delay_FPGALoad_A();
val = -1;
val = Xil_In32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(12+i)); //Reading from BRAM
delay_FPGALoad_A();
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(16+i), 0); //Making enable 0
delay_FPGALoad_A();
if(val != 0){
error_count = error_count + 1;
}
}
}
printf("Initialization errors in Data BRAMs = %d\n",error_count);
}


//Function to write data into BRAM
void FPGALoadA(){
int i;
int val_int;
//The base address of the LUD accelerator may needed to be changed. The base address assumed is 'XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR'
//Making enable and write_enable 0 for all the BRAMS
for(i=0;i<4;i++){
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(16+i), 0); //Making enable 0
delay_FPGALoad_A();
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(20+i), 0); //Making write enable 0
delay_FPGALoad_A();
}
//Writing A into BRAM
for(i=0;i<A_size;i++){
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(4+A_BRAMInd[i]), A_BRAMAddr[i]); //Writing address,(4+A_BRAMInd[i]) is the offset
delay_FPGALoad_A();
val_int = float_to_int(A[i]);
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(8+A_BRAMInd[i]), val_int); //Writing data in din
delay_FPGALoad_A();
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(16+A_BRAMInd[i]), 1); //Making enable 1
delay_FPGALoad_A();
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(20+A_BRAMInd[i]), 1); //Making write enable 1
delay_FPGALoad_A();
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(16+A_BRAMInd[i]), 0); //Making enable 0
delay_FPGALoad_A();
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(20+A_BRAMInd[i]), 0); //Making write enable 0
delay_FPGALoad_A();
}
}


//Function to verify if A matrix is properly loaded into BRAMs
void verify_A_FPGALoad(){
int val_int, i;
float val;
float diff;
//Making enable and write_enable 0 for all the BRAMS
for(i=0;i<4;i++){
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(16+i), 0); //Making enable 0
delay_FPGALoad_A();
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(20+i), 0); //Making write enable 0
delay_FPGALoad_A();
}
//Reading A from BRAM
for(i=0;i<A_size;i++){
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(4+A_BRAMInd[i]), A_BRAMAddr[i]); //Writing address,(4+A_BRAMInd[i]) is the offset
delay_FPGALoad_A();
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(16+A_BRAMInd[i]), 1); //Making enable 1
delay_FPGALoad_A();
val_int = Xil_In32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(12+A_BRAMInd[i])); //Reading from BRAM
delay_FPGALoad_A();
Xil_Out32(XPAR_MYIP_LUDECOMPOSITION_0_BASEADDR + 4*(16+A_BRAMInd[i]), 0); //Making enable 0
delay_FPGALoad_A();
val = int_to_float(val_int);
diff = val - A[i];
if(diff < -0.000001 || diff > 0.000001){
printf("Error in verification, index = %d, correct value = %f, BRAM value = %f\n",i,A[i],val);
}
}
}
